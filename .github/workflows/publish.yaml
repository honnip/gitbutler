name: "Release"

on:
  workflow_dispatch:
    inputs:
      channel:
        type: choice
        required: true
        description: channel
        options:
          - release
          - nightly
      release-type:
        type: choice
        required: true
        description: semver update type
        options:
          - patch
          - minor
          - major

jobs:
  publish:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform:
          - macos-latest
          - macos-14 # M1
          - ubuntu-20.04
          # - windows-latest
    runs-on: ${{ matrix.platform }}
    env:
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        # with:
        #  token: ${{ secrets.PAT_NGALAIKO }} # custom token here so that we can push tags later

      - name: Install dependencies on Ubuntu
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo apt update
          sudo apt install -y libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@nightly

      - name: Setup Rust cache
        uses: swatinem/rust-cache@v2

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install frontend dependencies
        run: pnpm install

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Use input params
        shell: bash
        run: |
          echo "channel=${{ github.event.inputs.channel }}" >> $GITHUB_ENV
          echo "bump=${{ github.event.inputs.release-type }}" >> $GITHUB_ENV

      - name: Get current version and set next version
        shell: bash
        run: |
          CURRENT_VERSION="$(curl --silent "https://app.gitbutler.com/releases/${{ env.channel }}" | jq -r '.version')"
          NEXT_VERSION=$(./scripts/next.sh "${CURRENT_VERSION}" "${{ env.bump }}")
          echo "version=$NEXT_VERSION" >> $GITHUB_ENV

      #- name: Import gpg key
      #  if: ${{ runner.os == 'Linux' }}
      #  uses: crazy-max/ghaction-import-gpg@v6
      #  with:
      #    gpg_private_key: ${{ secrets.APPIMAGE_PRIVATE_KEY }}
      #    passphrase: ${{ secrets.APPIMAGE_KEY_PASSPHRASE }}

      - name: Build
        uses: tauri-apps/tauri-action@v0
        env:
          # GitHub Release
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # AppImage signing
          #SIGN: 1
          #SIGN_KEY: ${{ secrets.APPIMAGE_KEY_ID }}
          #APPIMAGETOOL_SIGN_PASSPHRASE: ${{ secrets.APPIMAGE_KEY_PASSPHRASE }}
          # macOS signing
          #APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          #APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          #APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          #APPLE_ID: ${{ secrets.APPLE_ID }}
          #APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          #APPLE_TEAM_ID: ${{ secrets.APPLE_PROVIDER_SHORT_NAME }}
          # Updater for NSIS, MSI, AppImage, App bundle
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          args: --config ${{ env.channel == 'nightly' && 'gitbutler-app/tauri.conf.nightly.json' || 'gitbutler-app/tauri.conf.release.json' }} --features ${{ env.channel == 'nightly' && 'devtools' || '' }}
          releaseName: 'GitButler ${{ env.channel }} __VERSION__'
          tagName: ${{ env.channel }}/__VERSION__
          appVersion: ${{ env.version }}
          releaseDraft: true
          prerelease: ${{ env.channel == 'nightly' && true || false }}

      - name: Copy binaries
        shell: bash
        run: |
          os=$(echo $(uname -s) | tr [A-Z] [a-z])
          arch=$(uname -m)
          if [ $arch == 'arm64' ]; then
            arch='aarch64'
          fi
          mkdir -p release/$os/$arch
          find target/release/bundle \( -name '*.deb' -o -name '*.AppImage' -o -name '*.dmg' -o -name '*.tar.gz' -o -name '*.tar.gz.sig' \) -exec cp {} releases/$os/$arch \;

      #- name: Upload To S3
      #  uses: shallwefootball/s3-upload-action@master
      #  id: S3
      #  with:
      #    aws_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #    aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
      #    aws_bucket: "releases.gitbutler.com"
      #    source_dir: "release/" # target/release/bundle/<bundle>/<bundle>.deb to release/$os/$arch/<bundle>.deb
      #    destination_dir: "releases/${{ env.channel }}/${{ env.version }}-${{ github.run_number }}"

      #- name: Tell our server to update
      #  run: |
      #    curl 'https://app.gitbutler.com/api/releases'
      #      --fail
      #      --request POST
      #      --header 'Content-Type: application/json'
      #      --header 'X-Auth-Token: ${{ secrets.BOT_AUTH_TOKEN }}'
      #      --data '{"channel":"${{ env.channel }}","version":"${{ env.version }}-${{ github.run_number }}","sha":"${{ github.sha }}"}'
